"""Added registration to user table

Revision ID: 7cac0bfdf8dc
Revises: 84cbdd0c22cc
Create Date: 2023-06-19 12:23:14.017142

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7cac0bfdf8dc'
down_revision = '84cbdd0c22cc'
branch_labels = None
depends_on = None


def upgrade():       
       # create inspector
       bind = op.get_bind()
       inspector = reflection.Inspector.from_engine(bind)
       with op.batch_alter_table('user', schema=None) as batch_op:
              # check if the column exists before adding it
              if 'email' in [c['name'] for c in inspector.get_columns('user')]:
                     return
              batch_op.add_column(sa.Column('email', sa.String(length=254), nullable=False))
              batch_op.alter_column('password',
                     existing_type=sa.VARCHAR(length=255),
                     type_=sa.String(length=64),
                     existing_nullable=False)
              batch_op.alter_column('aka',
                     existing_type=sa.VARCHAR(length=255),
                     type_=sa.String(length=20),
                     nullable=True)
              batch_op.create_unique_constraint(None, ['email'])
              batch_op.drop_column('username')

       # ### end Alembic commands ###


def downgrade():
# ### commands auto generated by Alembic - please adjust! ###
with op.batch_alter_table('user', schema=None) as batch_op:
       batch_op.add_column(sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
       batch_op.drop_constraint(None, type_='unique')
       batch_op.alter_column('aka',
              existing_type=sa.String(length=20),
              type_=sa.VARCHAR(length=255),
              nullable=False)
       batch_op.alter_column('password',
              existing_type=sa.String(length=64),
              type_=sa.VARCHAR(length=255),
              existing_nullable=False)
       batch_op.drop_column('email')

# ### end Alembic commands ###
`