"""Added google_id to user model for google oauth

Revision ID: 89c8f1d9288f
Revises: 9420033d7153
Create Date: 2023-11-12 18:19:19.341715

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '89c8f1d9288f'
down_revision = '9420033d7153'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('flask_dance_oauth')
    with op.batch_alter_table('web_authn', schema=None) as batch_op:
        batch_op.drop_index('ix_web_authn_credential_id')

    op.drop_table('web_authn')
    with op.batch_alter_table('goal', schema=None) as batch_op:
        batch_op.drop_constraint('goal_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_constraint('task_goal_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'goal', ['goal_id'], ['id'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('password',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('password',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('task_goal_id_fkey', 'goal', ['goal_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('goal', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('goal_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')

    op.create_table('web_authn',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('credential_id', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('public_key', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('sign_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transports', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('backup_state', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('device_type', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('extensions', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('create_datetime', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('lastuse_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('usage', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='web_authn_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='web_authn_pkey')
    )
    with op.batch_alter_table('web_authn', schema=None) as batch_op:
        batch_op.create_index('ix_web_authn_credential_id', ['credential_id'], unique=False)

    op.create_table('flask_dance_oauth',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('token', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('provider_user_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='flask_dance_oauth_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='flask_dance_oauth_pkey'),
    sa.UniqueConstraint('provider_user_id', name='flask_dance_oauth_provider_user_id_key')
    )
    # ### end Alembic commands ###
