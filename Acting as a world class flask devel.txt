Acting as a world class flask developer, Given this design document

Design Document
Purpose
This document provides a detailed specification for the design and layout of the Role Selection page. It includes color schemes, typography, and interactive elements. This design aims to provide a visually appealing, user-friendly, and intuitive interface for the users.

Color Scheme
The primary colors used in the design are as follows:

Purple (#800080): This color is used to indicate interactive elements and user actions such as hover and selection.
White (#FFFFFF): This is the primary background color, which helps keep the interface clean and simple.
Black (#000000): This is the primary text color, providing a high contrast against the white background for readability.
Typography
Heading ("What do you want to do today?"): Open Sans, 36px, Bold, Black
Sub-heading ("Choose your role to get started"): Open Sans, 28px, Semi-Bold, Black
Role Cards: Open Sans, 20px, Regular, Black
Input Field: Open Sans, 16px, Regular, Black
Note: Open Sans is a humanist sans serif typeface designed for readability and a friendly, open appearance. It works well for both headings and body text.

Layout
The main heading "What do you want to do today?" is centered at the top of the page.

Below the main heading is the sub-heading "Choose your role to get started", also centered.

Underneath the sub-heading is a stylized input selection box. This box has similar effects to the role cards, including a purple border on focus and a subtle color change in the background. It's large enough for comfortable interaction and is clearly visible against the background.

The role cards are arranged in a centered horizontal row below the input box. Each card is equally spaced and easily clickable. On hover, the card moves slightly upwards (translates along the y-axis), and the border color changes to purple. On selection, the card's background color changes to purple.

On the input field, an animation is added to make the interface feel more responsive. The border color subtly changes when the field is focused, and the background color changes slightly when the user starts typing.

Interactions
When a user hovers over a role card, the card animates upwards and its border color changes to purple.
When a user selects a role card, the card's background color changes to purple.
When a user clicks on the input box, its border color changes to purple.
As a user starts typing in the input box, the background color subtly changes to provide feedback.
This design aims to provide a visually engaging, interactive, and user-friendly interface that encourages users to select a role and interact with the application. It balances aesthetics with usability, ensuring a pleasing experience that doesn't sacrifice functionality.

and this html/flask
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h1 class="text-center">Choose your role to get started</h1>
    <div class="row">
        <div class="card-container">
            {% for role in roles %}
            <div class="col-sm-6 col-md-4 col-lg-3 mt-4">
                <div class="card role-card">
                    <div class="card-body">
                        <h5 class="card-title">{{ role }}</h5>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        <form action="{{ url_for('role_selection') }}" method="POST">
            <input type="hidden" name="role" id="selectedRole">
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
    <div class="text-container">
        <input class="input" type="text" placeholder="Role">
        <span class="border"></span>
    </div>
</div>
<script>
    window.onload = function () {
        var cards = document.getElementsByClassName('role-card');
        for (var i = 0; i < cards.length; i++) {
            cards[i].addEventListener('click', function (e) {
                var activeCard = document.getElementsByClassName('active')[0];
                if (activeCard) activeCard.classList.remove('active');
                this.classList.add('active');
            });
        }
    }
</script>
{% endblock %}

refactor the html and write css